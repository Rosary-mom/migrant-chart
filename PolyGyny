<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verfeinerte Gamifizierte Simulation: Re-Migration & Volkshygiene</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f4; }
        .container { max-width: 1200px; margin: auto; }
        .slider { width: 100%; margin: 10px 0; }
        .output { font-weight: bold; }
        button { padding: 10px 20px; background: #4CAF50; color: white; border: none; cursor: pointer; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }
        th { background: #f2f2f2; }
        .badge { padding: 5px 10px; border-radius: 5px; color: white; }
        .stable { background: green; }
        .boom { background: blue; }
        .collapse { background: red; }
        .risk { background: orange; }
        #chart, #pyramidChart { margin: 20px 0; }
        .comparison { margin: 20px 0; padding: 10px; background: #e0f7fa; border: 1px solid #00acc1; }
        .level { margin: 10px 0; font-size: 1.2em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Verfeinerte Gamifizierte Simulation: Re-Migration bis 2050 & Volkshygiene</h1>
        <p>Integriert Re-Migration (inspiriert von migrant-chart) mit Polygynie, Gesundheit/IQ-Stabilisierung durch Heterosis vs. Degeneration, Subsidien (wie Riester). Erweitert auf USA.</p>
        
        <!-- Sliders -->
        <label>Startpopulation: <span id="startPopVal">100000</span></label>
        <input type="range" class="slider" id="startPop" min="10000" max="1000000" value="100000" oninput="updateVal('startPopVal', this.value)">

        <label>Fertilität Monogamie: <span id="fertMonoVal">1.5</span></label>
        <input type="range" class="slider" id="fertMono" min="1.0" max="3.0" step="0.1" value="1.5" oninput="updateVal('fertMonoVal', this.value)">

        <label>Fertilität Poly: <span id="fertPolyVal">2.5</span></label>
        <input type="range" class="slider" id="fertPoly" min="1.0" max="4.0" step="0.1" value="2.5" oninput="updateVal('fertPolyVal', this.value)">

        <label>Adoption Basis (%): <span id="adoptBaseVal">5</span></label>
        <input type="range" class="slider" id="adoptBase" min="0" max="20" value="5" oninput="updateVal('adoptBaseVal', this.value)">

        <label>Adoption Hoch (%): <span id="adoptHighVal">10</span></label>
        <input type="range" class="slider" id="adoptHigh" min="0" max="20" value="10" oninput="updateVal('adoptHighVal', this.value)">

        <label>Generationen: <span id="gensVal">10</span></label>
        <input type="range" class="slider" id="gens" min="1" max="20" value="10" oninput="updateVal('gensVal', this.value)">

        <label>Künstliche Befruchtung Boost: <span id="aiFertVal">1.5</span></label>
        <input type="range" class="slider" id="aiFert" min="1.0" max="2.0" step="0.1" value="1.5" oninput="updateVal('aiFertVal', this.value)">

        <label>Re-Migration Rate bis 2050 (% Reduktion): <span id="reMigVal">50</span></label>
        <input type="range" class="slider" id="reMig" min="0" max="100" value="50" oninput="updateVal('reMigVal', this.value)">

        <label>Inzucht-Reduktion (%): <span id="inzuchtRedVal">20</span></label>
        <input type="range" class="slider" id="inzuchtRed" min="0" max="50" value="20" oninput="updateVal('inzuchtRedVal', this.value)">

        <label>Heterosis-Boost: <span id="heterosisVal">1.2</span></label>
        <input type="range" class="slider" id="heterosis" min="1.0" max="1.5" step="0.1" value="1.2" oninput="updateVal('heterosisVal', this.value)">

        <label>Subsidien-Boost (z.B. Riester): <span id="subsidyVal">1.2</span></label>
        <input type="range" class="slider" id="subsidy" min="1.0" max="1.5" step="0.1" value="1.2" oninput="updateVal('subsidyVal', this.value)">

        <label>Polyandrie-Modus (0=Polygynie, 1=Polyandrie): <span id="polyandryVal">0</span></label>
        <input type="range" class="slider" id="polyandry" min="0" max="1" step="1" value="0" oninput="updateVal('polyandryVal', this.value)">

        <label>Initialer Ursprungsanteil (%): <span id="originShareVal">70</span></label>
        <input type="range" class="slider" id="originShare" min="50" max="90" value="70" oninput="updateVal('originShareVal', this.value)">

        <label>Land: </label>
        <select id="country">
            <option value="DE">Deutschland (83M, 70% Ursprung)</option>
            <option value="US">USA (340M, 59% Weiß)</option>
        </select>

        <button onclick="simulate()">Simulieren!</button>
        
        <!-- Tabelle -->
        <table id="resultTable"></table>
        
        <!-- Charts -->
        <canvas id="populationChart" width="800" height="400"></canvas>
        <canvas id="iqHealthChart" width="800" height="400"></canvas>
        
        <!-- Score & Level -->
        <div id="score" class="level"></div>
        
        <!-- Download -->
        <button onclick="downloadCSV()">Tabelle als CSV downloaden</button>
        
        <!-- Vergleich -->
        <div class="comparison">
            <h2>Hinweise zu Volkshygiene & Persistenz</h2>
            <p>Fiktiv: Re-Migration reduziert Inzucht-Risiken, stabilisiert IQ (Heterosis-Boost). Subsidien (wie Riester) machen Modelle persistent. USA: Stärkerer Rückgang weißer Anteil.</p>
        </div>
    </div>

    <script>
        let myChart, iqHealthChart;
        function updateVal(id, val) { document.getElementById(id).innerText = val; }

        function simulate() {
            let startPop = parseInt(document.getElementById('startPop').value);
            const country = document.getElementById('country').value;
            if (country === 'US') startPop = 340000000;
            const fertMono = parseFloat(document.getElementById('fertMono').value);
            const fertPoly = parseFloat(document.getElementById('fertPoly').value);
            const adoptBase = parseFloat(document.getElementById('adoptBase').value) / 100;
            const adoptHigh = parseFloat(document.getElementById('adoptHigh').value) / 100;
            const gens = parseInt(document.getElementById('gens').value);
            const aiFert = parseFloat(document.getElementById('aiFert').value);
            const reMig = 1 - (parseFloat(document.getElementById('reMig').value) / 100); // Reduktion
            const inzuchtRed = parseFloat(document.getElementById('inzuchtRed').value) / 100;
            const heterosis = parseFloat(document.getElementById('heterosis').value);
            const subsidy = parseFloat(document.getElementById('subsidy').value);
            const polyandry = parseInt(document.getElementById('polyandry').value);
            const originShare = parseFloat(document.getElementById('originShare').value) / 100;
            const polyFactor = polyandry ? 1.1 : 1.2;
            const stabilityFactor = 1.3 * aiFert * subsidy * heterosis * (1 + inzuchtRed);

            function growth(start, fert, adopt, extra = 1) {
                let pop = [start];
                let iq = [100]; // Start IQ
                let health = [80]; // Start Gesundheit %
                let origin = [Math.round(start * originShare)];
                for (let g = 1; g <= gens; g++) {
                    let baseGrowth = pop[g-1] * (fert / 2) * reMig; // Re-Mig reduziert
                    let adoptAdd = baseGrowth * adopt;
                    let newPop = Math.round((baseGrowth + adoptAdd) * extra);
                    pop.push(newPop);
                    // IQ/Gesundheit: Heterosis boost, Inzucht-Reduktion
                    iq.push(iq[g-1] + (heterosis - 1) * 1 - (1 - inzuchtRed) * 0.5);
                    health.push(health[g-1] + inzuchtRed * 2);
                    origin.push(Math.round(origin[g-1] * (fert / 2) * extra * 0.99));
                }
                return {pop, iq, health, origin};
            }

            const mono = growth(startPop, fertMono, adoptBase);
            const polyStd = growth(startPop, fertPoly, adoptBase, 1 / polyFactor);
            const polyPrimo = growth(startPop, fertPoly, adoptHigh, stabilityFactor / polyFactor);

            // Tabelle bauen
            let table = '<tr><th>Gen</th><th>Mono Pop</th><th>Mono IQ</th><th>Mono Health %</th><th>Poly Std Pop</th><th>Poly Std IQ</th><th>Poly Std Health %</th><th>Poly Primo Pop</th><th>Poly Primo IQ</th><th>Poly Primo Health %</th><th>Score</th></tr>';
            for (let g = 0; g <= gens; g++) {
                let score = 'Stabil';
                let badgeClass = 'stable';
                let growthRate = (polyPrimo.pop[g] / startPop) * 100;
                if (growthRate > 200) { score = 'Boom - Volkshygiene-Optimiert!'; badgeClass = 'boom'; }
                if (growthRate < 100) { score = 'Kollaps'; badgeClass = 'collapse'; }
                if (polyPrimo.iq[g] < 100) { score += ' (Degenerationsrisiko)'; badgeClass = 'risk'; }
                table += `<tr><td>${g}</td><td>${mono.pop[g]}</td><td>${mono.iq[g]}</td><td>${mono.health[g]}</td><td>${polyStd.pop[g]}</td><td>${polyStd.iq[g]}</td><td>${polyStd.health[g]}</td><td>${polyPrimo.pop[g]}</td><td>${polyPrimo.iq[g]}</td><td>${polyPrimo.health[g]}</td><td><span class="badge ${badgeClass}">${score}</span></td></tr>`;
            }
            document.getElementById('resultTable').innerHTML = table;

            // Population Chart
            const ctx = document.getElementById('populationChart').getContext('2d');
            if (myChart) myChart.destroy();
            myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: Array.from({length: gens+1}, (_, i) => i),
                    datasets: [
                        { label: 'Monogamie', data: mono.pop, borderColor: 'green' },
                        { label: 'Poly Std', data: polyStd.pop, borderColor: 'blue' },
                        { label: 'Poly Primo & Re-Mig', data: polyPrimo.pop, borderColor: 'red' }
                    ]
                },
                options: { scales: { y: { beginAtZero: true } } }
            });

            // IQ/Gesundheit Chart
            const iqHealthCtx = document.getElementById('iqHealthChart').getContext('2d');
            if (iqHealthChart) iqHealthChart.destroy();
            iqHealthChart = new Chart(iqHealthCtx, {
                type: 'line',
                data: {
                    labels: Array.from({length: gens+1}, (_, i) => i),
                    datasets: [
                        { label: 'Primo IQ', data: polyPrimo.iq, borderColor: 'purple' },
                        { label: 'Primo Health %', data: polyPrimo.health, borderColor: 'orange' }
                    ]
                },
                options: { scales: { y: { beginAtZero: true } } }
            });

            // Score & Level
            const level = reMig < 0.8 && polyPrimo.iq[gens] > 105 ? 'Volkshygiene-Meister: Persistent & Positiv!' : 'Basis Level';
            document.getElementById('score').innerHTML = `<h3>${level} - Gesamtscore: ${polyPrimo.pop[gens] > startPop * 2 ? 'Boom!' : 'Stabil'}</h3>`;
        }

        function downloadCSV() {
            const rows = Array.from(document.querySelectorAll('#resultTable tr'));
            let csv = rows.map(row => Array.from(row.cells).map(cell => cell.innerText).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'simulation.csv';
            a.click();
        }
    </script>
</body>
</html>
